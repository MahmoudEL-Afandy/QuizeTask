

@model ExamQuePaginationVM

@{
    ViewBag.Title = "Take Exam";
}

<div class="container mt-5">
    <div class="card">
        <div class="card-header bg-primary text-white">
            <h2 class="card-title">@Model.Exam.Title</h2>
            <p class="card-text">@Model.Exam.Description</p>
        </div>
        <div class="text-center mt-3">
            <div id="timer" class="h4 text-danger"></div>
        </div>
        <div class="progress mb-4">
            <div class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
        </div>
        <div class="card-body">
            <form asp-action="SubmitExam" asp-route-id="@Model.Exam.Id" method="post">
                <!-- Questions Container -->
                <div id="questions-container">
                    @foreach (var item in Model.Questions)
                    {
                        <div class="form-group mb-4 question">
                            <h4 class="mb-3">Question @(Model.Questions.IndexOf(item) + 1): @item.Title</h4>
                            <div class="list-group">
                                <div class="list-group-item">
                                    <input type="radio" name="answers[@item.Id]" value="@item.Choice1" id="q@(item.Id)_1" class="form-check-input"/>
                                    <label for="q@(item.Id)_1" class="form-check-label ms-2">@item.Choice1</label>
                                </div>
                                <div class="list-group-item">
                                    <input type="radio" name="answers[@item.Id]" value="@item.Choice2" id="q@(item.Id)_2" class="form-check-input" />
                                    <label for="q@(item.Id)_2" class="form-check-label ms-2">@item.Choice2</label>
                                </div>
                                <div class="list-group-item">
                                    <input type="radio" name="answers[@item.Id]" value="@item.Choice3" id="q@(item.Id)_3" class="form-check-input" />
                                    <label for="q@(item.Id)_3" class="form-check-label ms-2">@item.Choice3</label>
                                </div>
                                <div class="list-group-item">
                                    <input type="radio" name="answers[@item.Id]" value="@item.Choice4" id="q@(item.Id)_4" class="form-check-input" />
                                    <label for="q@(item.Id)_4" class="form-check-label ms-2">@item.Choice4</label>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <!-- Pagination Controls -->
                <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-center" id="pagination-controls">
                        <!-- Pagination buttons will be dynamically added here -->
                    </ul>
                </nav>

                <div class="form-group text-center">
                    <button type="submit" class="btn btn-success btn-lg">Submit Exam</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- JavaScript for Client-Side Pagination -->
@section Scripts {
    <script>
        // Set the exam duration in minutes
        const examDuration = 5; // Change this to the desired duration
        let timeLeft = localStorage.getItem('timeLeft') ? parseInt(localStorage.getItem('timeLeft')) : examDuration * 60;

        const timerElement = document.getElementById('timer');

        function updateTimer() {
            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;
            timerElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;

            if (timeLeft <= 0) {
                clearInterval(timerInterval);
                localStorage.removeItem('timeLeft'); // Clear the timer from storage
                alert('Time is up! Submitting your exam...');
                // document.querySelector('form').submit(); Automatically submit the form
            } else {
                timeLeft--;
                localStorage.setItem('timeLeft', timeLeft); // Save the remaining time
            }
        }

        const timerInterval = setInterval(updateTimer, 1000);

        // Clear the timer when the exam is submitted manually
        document.querySelector('form').addEventListener('submit', () => {
            localStorage.removeItem('timeLeft');
        });

        // Client-Side Pagination Logic
        const questionsPerPage = 2; // Number of questions to display per page
        const questions = document.querySelectorAll('.question'); // All question containers
        const paginationControls = document.getElementById('pagination-controls');

        // Function to show a specific page
        function showPage(page) {
            const start = (page - 1) * questionsPerPage;
            const end = start + questionsPerPage;

            questions.forEach((question, index) => {
                if (index >= start && index < end) {
                    question.style.display = 'block';
                } else {
                    question.style.display = 'none';
                }
            });
        }

        // Function to create pagination buttons
        function createPaginationButtons(totalPages) {
            let buttons = '';

            for (let i = 1; i <= totalPages; i++) {
                buttons += `
                    <li class="page-item">
                        <a class="page-link" href="#" data-page="${i}">${i}</a>
                    </li>
                `;
            }

            paginationControls.innerHTML = buttons;

            // Add event listeners to pagination buttons
            paginationControls.querySelectorAll('.page-link').forEach(button => {
                button.addEventListener('click', (e) => {
                    e.preventDefault();
                    const page = parseInt(button.getAttribute('data-page'));
                    showPage(page);
                });
            });
        }

        // Initialize pagination
        const totalPages = Math.ceil(questions.length / questionsPerPage);
        createPaginationButtons(totalPages);

        // Show the first page by default
        showPage(1);
    </script>

    <!-- Progress Bar Script -->
    <script>
        const progressBar = document.querySelector('.progress-bar');
        const totalQuestions = @Model.Exam.Questions.Count;
        let answeredQuestions = 0;

        document.querySelectorAll('input[type="radio"]').forEach(radio => {
            radio.addEventListener('change', () => {
                answeredQuestions = document.querySelectorAll('input[type="radio"]:checked').length;
                const progress = (answeredQuestions / totalQuestions) * 100;
                progressBar.style.width = `${progress}%`;
                progressBar.setAttribute('aria-valuenow', progress);
            });
        });
    </script>
}